1.  Login to you machines : User/Password 
2.  Spring Tool Suite  4 
3.  Once this done we will create a Spring boot Project :- 
4.  Create a Spring Starter Project :- 
5.  Spring Starters (Prepacked Libaries Features That Enhance the Spring (Plugins))		
	a)  Spring Web 
	b)  Spring Dev Tools 
	c)  Spring Validation

-----------------------------------------------------------------------------------------
6.  Created a new package for myself 
		com.vinsys.security.vo
7. 
public class Customer {

	@NotBlank
	@NotNull
	@Size(min = 3, max = 20, message = "Your field is to short or too long")
	private String customerName;

	@Email
	@NotNull
	@NotBlank
	private String email;

	@Min(0)
	@Max(100)
	private Long quantity;
	++ /get/set

8.  The most important part how does input validation work 
	Write a Controller : 
		in a package com.vinsys.secured.controllers 

@RestController
@RequestMapping(path = "/customer")
public class CustomerController {

	@PostMapping(consumes = "application/json")
	public String createCustomer(@Valid @RequestBody Customer customer) {
		return "Success...";

	}
}

9.  Used my Postman to validate the input Validations 

		
{

    "customerName" : "xxxxx", 
    "email"  : "nilesh.devdas@vinsys.com"

}

*** Complex Validations are yet to be done : 
1. File Upload and Sizes for file upload
2. Text Area Long texts 
3. Special Character Validation 


Authentication and Authorization : - 

Principle any system that passes username and password over the network must use 
HTTPS 

How to Secure your Application for SSL (SPring Boot) Any Service So that 
Data Transmiteed is over Secured Layer 

Encryption of the data 

Lab-2
Download the KSE 

We are going to create 2 Certificates 
	a) Signer Certificate for CA 
	b) Identity Certificate 

	changeit

Should i always update my application Patches

Sensitive data travelling over the networks 


1. Start KeyStore Explorer : 
2. Create 1 (Signer.jks) 
	Create 2 (Identity.jks) 


3. Create a signer certificate 
4. Create identity Keypair 

5. Create a CSR (Certificate Siging Request) 
6. Sign The Request by the Signer 

7.  Import reply back and Done i have  certificate duly signed 

8.  I export Signer Certificate so people will trust me and so i use the signer certificate 


Securing your Base : For Transmitting username and password over Secured Application: 


#################SSL##########################
server.ssl.key-store=classpath:identity.jks
server.ssl.key-alias=demoidentity
server.ssl.enabled=true
server.ssl.key-store-password=root123
server.ssl.key-password=root123
#################SSL##########################

driver/ect/hosts --> which allows to create static host entries 


server.port=443



How to Create A signer Certificate 

1.  Open the Key Store 
2.  Generate a Key Pair 
3.  Chose RSA 2048
4.  Click Add Extensions 
	   Choose Use Standard Templates 
5.  Choose CA 
6.  Click the Book(Edit) Icon Besided the Name Field 
	   Add the Name of the singer 
7.  Save the Certificate and the KeyStore by passing a password 

8.  Now You will have to create  new Key Store for the identity 
9.   New -> JKS -> KeyStore 
10.  Generate a new Key Pair 
11.  This time when choosing the extensions you have to Choose SSL Server From the Use Standard Template 
12.  Dont forget to add Subject Alternative Name (This is you domain Name by which your site will run) 
13. 	e.g. *.myapp.com (* is widlcard)  same certificate can be used for multiple subdomains 
14.   once you save you id 
15.  To Generate the CSR (Certificate singing Request) 
		Right Click on the identity and generate CSR - > Request (Watch the location its generated) 
16.  To Sign this CSR Generated by the identity guy needs to be signed by the Signer 
17.  You will need to use this Signed Identity Certificate in your application for the 
		Securing SSL : 
18.  However you need to understand that the certificate : is not yet trusted unless you add it to the 
		certificate store (TrustedStore) of the respective application 
		Windows --> Windows Store 
	    Java --> Cacerts 
19.  To import your certificate (Signer Certificate) it should be imported in the (Trusted Root Cerfication) 
		For Windows 
		Java -> Ca Certs 
		For  Firefox or related application its in the applicaiton store 

		**** Dont Forget we are not interested in the indentity certificate we are interested in the signer 
		being imported as we trust the signer and signer trusts the applicant hence we trust the applicant 
		also 
		
	 At the end once the import is done adjust your propeties file 



#################SSL##########################
server.ssl.key-store=classpath:identity.jks (Contains the CA Certificate as well as your)
server.ssl.key-alias=demoidentity (Alias) 
server.ssl.enabled=true 
server.ssl.key-store-password=root123 (password keystore) 
server.ssl.key-password=root123 (Private key password)
#################SSL##########################

root123

--- To Test ----
C:\Windows\System32\drivers\etc

in the host file you will need to add an entry ? 

# Host file Entry
127.0.0.1			www.demo.com 			demo








1. CSRF : ------ 
	Registration form : 
	
	Name  : dsdsd
	Email : sdsdsd
	Comment : Why you want to register sdsdsd
	Submit --> 
	
	

2. Whitelisting 
3. Cookie and Same Site Issue 
4. 

A) if you create a form without  csrf token there is 100% gurantee that your application form 
	will be flooded with spam with robots or nuisance 
	
B)  Create  a New Spring Boot Project 
	a) Add a new package 


import java.io.IOException;
import java.io.PrintWriter;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import jakarta.servlet.http.HttpServletRequest;

import jakarta.servlet.http.HttpServletResponse;

@Controller
public class RegistrationController {

	@PostMapping(path = "/register")
	public void registerAndSendMail(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String email = request.getParameter("email");
		String comment = request.getParameter("comment");
		System.out.println("Sending Mail .......................");
		PrintWriter writer = response.getWriter();
		writer.write("Thank You For Registering");
		writer.flush();
	}
}

The Above controller is allowing registration : Registrations ?
But Due to CSRF was (Cross Site Request Forgery)  Was Applied 
the impacts were Wrong /Spammed Rgisteration / Spam Mailers / 
Junk Data /  unecessary Paid up Services / Flooding 


I create seperate HTML file in some another tool 
I create Javascript 


	<!-- CSRF --> 

    <form method="post" action="http://localhost:8080/register">
        <label>Email</label>
        <input type="text" name="email">
        <label>Email</label>
        <input type="text" message="comment">
        <input type="submit" value="Register">
    </form>

	<!-- CORS Protectio --> 
	Cross Origin Request 
    <script>
        for (var i = 0; i < 10; i++) {
            console.log(i);
            var request = new XMLHttpRequest();
            request.open('POST', 'http://localhost:8080/register', true);
            request.onreadystatechange = (data) => {
                console.log(data);
            }
            request.send("email=n@d.com&comment=anycomment")
        }
    </script>

<!--- Solution for Protection Forms --> 
CSRF --> 
Enabled Security 


@Configuration
@EnableWebSecurity
public class SecurityConfig {
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		// decide what you wish to whitelist ?
		//for testing Unlesss i have  alternative 
		http.csrf().disable();
		// for testing disable cors 
		http.authorizeHttpRequests(
				(r) -> r.requestMatchers("/register/**", "/login/**", "/error/**", "/", "/index.html").permitAll());
		return http.build();
	}
}

We also disabled the CrossOrigins 
@CrossOrigin(origins = "*")


IFrames and 

Content Security Policy : 

1. Injectsion of Scripts 
2. Injection of content 
3. Injections of Many Things 



Sending Cookies over HTTP Is very Dangerous : 
MiM Attack and Read Your Cookies : Profile/Kyc/Info/Tokens

Cookies to Secure : They will be set only and only if you https 
Gurantees that data is not being sent over clear text becuase cookies 
may contain sensitive data 

Cookies to : Http Only : The Reason is that no javascript should be able 
read your cookies and send it anonymously to someone else 

Cookies :  SameSite --> Cookies originated form your site should read 
only by your site and no else 
























































